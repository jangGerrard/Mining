package kr.ac.kw.mining.controller;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import kr.ac.kw.mining.domain.Event;
import kr.ac.kw.mining.domain.TimeStamp;
import kr.ac.kw.mining.service.TimeStampService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	@Autowired
	private TimeStampService timeStampService;
	
   @RequestMapping(value="login", method=RequestMethod.GET)
	public String home(Locale locale, Model model) {
		System.out.println("home");
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		return "home";
	}
   
   @RequestMapping(value="jang", method=RequestMethod.GET)
	public String jang(Locale locale, Model model) {
		System.out.println("home");
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		return "jang";
	}
   
   @ResponseBody
   @RequestMapping(value="json", method=RequestMethod.GET)
   public Map<String,String> json(Locale locale, Model model){
	   Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		Map<String,String> maps = new HashMap<String,String>();
		maps.put("jang","jang");
		maps.put("park","park");
		maps.put("shin","shin");
		maps.put("cho","cho");
		String str = "";
		return maps;
   }
   
   @ResponseBody
   @RequestMapping(value = "timestamp", method=RequestMethod.GET)
   public Map<String ,Object> timeLineJson(//centerYear
		   @RequestParam("yearSelection") int yearSelection,
		   Locale locale, 
		   Model model){
	   System.out.println("yearSelection : "+yearSelection);
	   List<Event> events = new ArrayList<Event>();
//	   List<TimeStamp> timeStamps = timeStampService.findTimeStamps();
	   List<TimeStamp> timeStamps = timeStampService.selectTimeStampsByBetweenCenterYear(yearSelection);
	   Pattern pattern = Pattern.compile("[0-9]*");
		Matcher matcher;
		String tempTime = "";
		String time ="";
		String title ="";
		System.out.println("timeStamps size : "+ timeStamps.size());
		for (int i = 0; i < timeStamps.size(); i++) {
			Event event = new Event(); 
			TimeStamp timeStamp = timeStamps.get(i);
			matcher = pattern.matcher(timeStamp.getYear().trim());
			if(matcher.find()){
				tempTime = matcher.group();
				System.out.println("tempTime : " + tempTime+" , length : "+tempTime.length());
//				time = matcher.group();
				if(tempTime.length() < 4){
					int tempLen = tempTime.length();
					for(int j  = 0 ; j< 4 - tempLen ; j++){
						tempTime = "0"+tempTime;
					}
				}
				System.out.println("resutl  time : "+tempTime);
				time = tempTime;
			}
			time += ("-"+ (timeStamp.getMonth().length() == 1 ? "0"+timeStamp.getMonth():timeStamp.getMonth()) );
			time += ("-"+ (timeStamp.getDate().trim().length() == 1 ? "0"+timeStamp.getDate().trim() : timeStamp.getDate().trim()) );
			int lengthContent = timeStamp.getContent().length();
//			title += "";
//			title += timeStamp.getContent().substring( ( lengthContent >= 10 ?   lengthContent-10 : 0)      , lengthContent);
//			title += timeStamp.getCategory();
			title = timeStamp.getContent();
			event.setStart(time);
			if(title.length() > 15){
				title = (title.substring(0, 15) + "...");
			}
			event.setTitle(title);
			event.setDescription(timeStamp.getContent());
			events.add(event);
		}
		
//		'dateTimeFormat': 'iso8601',
//		'wikiURL': "http://simile.mit.edu/shelf/",
//		'wikiSection': "Simile Cubism Timeline",
	   
	   
	   Map<String,Object> maps = new HashMap<String,Object>();
	   maps.put("dateTimeFormat", "iso8601");
	   maps.put("wikiURL", "http://simile.mit.edu/shelf");
	   maps.put("wikiSection", "Simile Cubism Timeline");
	   maps.put("events",events);
	   
	   return maps;
   }
   
   
	
}
