package kr.ac.kw.mining.controller;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpSession;

import kr.ac.kw.mining.dao.YearPageCategoryDao;
import kr.ac.kw.mining.domain.Edge;
import kr.ac.kw.mining.domain.Event;
import kr.ac.kw.mining.domain.Node;
import kr.ac.kw.mining.domain.TimeStamp;
import kr.ac.kw.mining.domain.YearPageCategory;
import kr.ac.kw.mining.service.TimeStampService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	@Autowired
	private TimeStampService timeStampService;
	
	@Autowired
	private YearPageCategoryDao yearPageCategoryDao;
	
   @RequestMapping(value="login", method=RequestMethod.GET)
	public String home(Locale locale, Model model) {
		System.out.println("home");
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		return "home";
	}
   
   @RequestMapping(value="jang", method=RequestMethod.GET)
	public String jang(Locale locale, Model model) {
		System.out.println("jang.do");
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		return "jang";
	}
   
   @ResponseBody
   @RequestMapping(value="json", method=RequestMethod.GET)
   public Map<String,String> json(Locale locale, Model model){
	   Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		String formattedDate = dateFormat.format(date);
		model.addAttribute("serverTime", formattedDate );
		Map<String,String> maps = new HashMap<String,String>();
		maps.put("jang","jang");
		maps.put("park","park");
		maps.put("shin","shin");
		maps.put("cho","cho");
		String str = "";
		return maps;
   }
   
   @ResponseBody
   @RequestMapping(value = "timestamp", method=RequestMethod.GET)
   public Map<String ,Object> timeLineJson(//centerYear
		   @RequestParam("yearSelection") double doubleYearSelection,
		   @RequestParam("expandValue") int expandValue,   //table을 수정해야 할것 같아  id가 없어서.
		   Locale locale, 
		   Model model){
	   int yearSelection = (int)doubleYearSelection;
	   System.out.println("yearSelection : "+yearSelection+", expandValue : "+ expandValue);
	   List<Event> events = new ArrayList<Event>();
//	   List<TimeStamp> timeStamps = timeStampService.findTimeStamps();
	   List<TimeStamp> timeStamps = timeStampService.selectTimeStampsByBetweenCenterYear(yearSelection);
	   Pattern pattern = Pattern.compile("[0-9]*");
		Matcher matcher;
		String tempTime = "";
		String time ="";
		String title ="";
//		System.out.println("timeStamps size : "+ timeStamps.size());
		for (int i = 0; i < timeStamps.size(); i++) {
			Event event = new Event(); 
			TimeStamp timeStamp = timeStamps.get(i);
			matcher = pattern.matcher(timeStamp.getYear().trim());
			if(matcher.find()){
				tempTime = matcher.group();
//				System.out.println("tempTime : " + tempTime+" , length : "+tempTime.length());
//				time = matcher.group();
				if(tempTime.length() < 4){
					int tempLen = tempTime.length();
					for(int j  = 0 ; j< 4 - tempLen ; j++){
						tempTime = "0"+tempTime;
					}
				}
//				System.out.println("resutl  time : "+tempTime);
				time = tempTime;
			}
			time += ("-"+ (timeStamp.getMonth().trim().length() == 1 ? "0"+timeStamp.getMonth().trim():timeStamp.getMonth().trim()) );
			time += ("-"+ (timeStamp.getDate().trim().length() == 1 ? "0"+timeStamp.getDate().trim() : timeStamp.getDate().trim()) );
			int lengthContent = timeStamp.getContent().length();
//			title += "";
//			title += timeStamp.getContent().substring( ( lengthContent >= 10 ?   lengthContent-10 : 0)      , lengthContent);
//			title += timeStamp.getCategory();
			title = timeStamp.getContent();
			event.setStart(time);
			if(title.length() > 15){
				title = (title.substring(0, 15) + "...");
			}
			event.setTitle(title);
			event.setDescription(timeStamp.getContent());
			events.add(event);
		}
		
//		'dateTimeFormat': 'iso8601',
//		'wikiURL': "http://simile.mit.edu/shelf/",
//		'wikiSection': "Simile Cubism Timeline",
	   
	   
	   Map<String,Object> maps = new HashMap<String,Object>();
	   maps.put("dateTimeFormat", "iso8601");
	   maps.put("wikiURL", "http://simile.mit.edu/shelf");
	   maps.put("wikiSection", "Simile Cubism Timeline");
	   maps.put("events",events);
	   
	   return maps;
   }
   
   @RequestMapping(value="vertical", method=RequestMethod.GET)
  	public String verticalTimeline(Locale locale, Model model) {
  		System.out.println("verticalTimeline Controller");
  		Date date = new Date();
  		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
  		String formattedDate = dateFormat.format(date);
  		model.addAttribute("serverTime", formattedDate );
  		return "verticalTimeline";
  	}
   
   @ResponseBody
   @RequestMapping(value = "koreanTimeLine", method=RequestMethod.GET)
   public Map<String ,Object> KoreanHistoryJson(//centerYear
		   @RequestParam("yearSelection") double dYearSelection,
		   @RequestParam("expandValue") int expandValue,   //table을 수정해야 할것 같아  id가 없어서.
		   Locale locale, 
		   Model model){
	   System.out.println("koreanTimeLine"+dYearSelection);
	   
	   int yearSelection = (int) dYearSelection;
//	   List<TimeStamp> timeStamps = timeStampService.selectKoreanHistoryBetweenYear(yearSelection);
	   List<YearPageCategory> ypcs = yearPageCategoryDao.selectYpcDicBtnYear(yearSelection);
	   List<Event> events = new ArrayList<Event>();
	   for (YearPageCategory ypc : ypcs) {
		   Event event = new Event();
		   
		   
		   //시간 setting
		   boolean bcYear=false;;
		   Integer year = ypc.getYear();
		   if(year < 0){
			   year = -year;
			   bcYear  = true;
		   }
		   
		   String tempTime =  year.toString();
			if(tempTime.length() < 4){
				int tempLen = tempTime.length();
				for(int j  = 0 ; j< 4 - tempLen ; j++){
					tempTime = "0"+tempTime;
				}
			}
			if(bcYear){
				tempTime = "-"+tempTime;
				bcYear = false;
			}
			tempTime = tempTime + "-01-02";
		   event.setStart(tempTime);
		   
		   //title
		   event.setTitle(ypc.getYpcPageTitle().replace("_", " "));
		   event.setLink("http://ko.wikipedia.org/wiki/"+ypc.getYpcPageTitle());
		   event.setDescription(ypc.getYpcCatTitle().replace("_"," "));
		   event.setImage("imageURl");
		   
		   events.add(event);
	}
	   
		Map<String, Object> maps = new HashMap<String, Object>();
		maps.put("dateTimeFormat", "iso8601");
		maps.put("wikiURL", "http://localhost:11000/kw"); // discuss
		maps.put("wikiSection", "nodeView.do?title=");
		maps.put("events", events);

		return maps;
   }
   
   @ResponseBody
   @RequestMapping(value="cytoscapeJson", method=RequestMethod.GET)
	public Map<String ,Object> nodeDisplayJson(
			@RequestParam("id") String id,
			Locale locale, 
			Model model) {
	   
	   System.out.println("nodesEdgesss");

		Map<String,Object> maps = new HashMap<String,Object>();
		maps.put("format_version", "1.0");
		maps.put("generated_by", "cytoscape-3.2.0");
		maps.put("target_cytoscapejs_version","~2.1");
		Map<String,Object> data = new HashMap<String,Object>();
		data.put("selected", true);
		data.put("__Annotations",new ArrayList<Object>());
		data.put("shared_name", "WineCheeseNetwork");
		data.put("SUID", 52);
		data.put("name","WineCheeseNetwork");
		maps.put("data",data);
		Map<String,Object> elements = new HashMap<String,Object>();
		List<Node> nodes = new ArrayList<Node>();
		List<Edge> edges = new ArrayList<Edge>();
		
//		for(int i = 0 ; i < size; i++){
			
		
			nodes.add(new Node().setDummyNode(1, 10, 20));
			nodes.add(new Node().setDummyNode(2, 20, 30));
			
			edges.add(new Edge().setDummyEdge(1, 1, 2));
			
			//여기서 data넣는다.
//		}
		elements.put("nodes", nodes);
		elements.put("edges", edges);
		maps.put("elements",elements);
		return maps;
	}
   
   @RequestMapping(value="nodeView", method=RequestMethod.GET)
	public String nodeView(
			Locale locale, 
			Model model,
			@RequestParam("title") String title,
			HttpSession session) {
		System.out.println("nodeView.do");
//		int id = yearPageCategoryDao.selectFindIdByTitle(title);
		session.setAttribute("pageId", 1000);
		return "nodeView";
	}

   
	
}
